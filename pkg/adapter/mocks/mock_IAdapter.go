// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	dify "ask/pkg/adapter/dify"

	mock "github.com/stretchr/testify/mock"
)

// MockIAdapter is an autogenerated mock type for the IAdapter type
type MockIAdapter struct {
	mock.Mock
}

type MockIAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAdapter) EXPECT() *MockIAdapter_Expecter {
	return &MockIAdapter_Expecter{mock: &_m.Mock}
}

// Dify provides a mock function with given fields:
func (_m *MockIAdapter) Dify() dify.DifyAdapter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dify")
	}

	var r0 dify.DifyAdapter
	if rf, ok := ret.Get(0).(func() dify.DifyAdapter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dify.DifyAdapter)
		}
	}

	return r0
}

// MockIAdapter_Dify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dify'
type MockIAdapter_Dify_Call struct {
	*mock.Call
}

// Dify is a helper method to define mock.On call
func (_e *MockIAdapter_Expecter) Dify() *MockIAdapter_Dify_Call {
	return &MockIAdapter_Dify_Call{Call: _e.mock.On("Dify")}
}

func (_c *MockIAdapter_Dify_Call) Run(run func()) *MockIAdapter_Dify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAdapter_Dify_Call) Return(_a0 dify.DifyAdapter) *MockIAdapter_Dify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAdapter_Dify_Call) RunAndReturn(run func() dify.DifyAdapter) *MockIAdapter_Dify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAdapter creates a new instance of MockIAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAdapter {
	mock := &MockIAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
